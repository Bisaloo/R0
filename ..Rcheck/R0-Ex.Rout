
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin21.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "R0"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('R0')
Loading required package: MASS
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GT.chld.hsld")
> ### * GT.chld.hsld
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GT.chld.hsld
> ### Title: 2009 A/H1N1 observed Generation Time distribution
> ### Aliases: GT.chld.hsld
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(GT.chld.hsld)
> ## maybe str(GT.chld.hsld) ; plot(GT.chld.hsld) ...
> 
> 
> 
> cleanEx()
> nameEx("Germany.1918")
> ### * Germany.1918
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Germany.1918
> ### Title: Germany.1918 exemple dataset
> ### Aliases: Germany.1918
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Germany.1918)
> ## maybe str(Germany.1918) ; plot(Germany.1918) ...
> 
> 
> 
> cleanEx()
> nameEx("H1N1.serial.interval")
> ### * H1N1.serial.interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: H1N1.serial.interval
> ### Title: H1N1 serial interval sample
> ### Aliases: H1N1.serial.interval
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(H1N1.serial.interval)
> ## maybe str(H1N1.serial.interval) ; plot(H1N1.serial.interval) ...
> 
> 
> 
> cleanEx()
> nameEx("check.incid")
> ### * check.incid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.incid
> ### Title: Check incid in the input
> ### Aliases: check.incid
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Data is taken from the paper by Nishiura for key transmission parameters of an institutional
> ## outbreak during 1918 influenza pandemic in Germany
> data(Germany.1918)
> Germany.1918
1918-09-29 1918-09-30 1918-10-01 1918-10-02 1918-10-03 1918-10-04 1918-10-05 
        10          4          4         19          6         13         28 
1918-10-06 1918-10-07 1918-10-08 1918-10-09 1918-10-10 1918-10-11 1918-10-12 
        23         35         27         42         51         43         78 
1918-10-13 1918-10-14 1918-10-15 1918-10-16 1918-10-17 1918-10-18 1918-10-19 
        86         80        109        126        126        159        190 
1918-10-20 1918-10-21 1918-10-22 1918-10-23 1918-10-24 1918-10-25 1918-10-26 
       209        161        199        227        246        269        243 
1918-10-27 1918-10-28 1918-10-29 1918-10-30 1918-10-31 1918-11-01 1918-11-02 
       259        264        243        289        247        289        263 
1918-11-03 1918-11-04 1918-11-05 1918-11-06 1918-11-07 1918-11-08 1918-11-09 
       230        235        227        208        184        179        139 
1918-11-10 1918-11-11 1918-11-12 1918-11-13 1918-11-14 1918-11-15 1918-11-16 
       157        141        128        142        129         99        109 
1918-11-17 1918-11-18 1918-11-19 1918-11-20 1918-11-21 1918-11-22 1918-11-23 
        79         86         73         86         71         80         71 
1918-11-24 1918-11-25 1918-11-26 1918-11-27 1918-11-28 1918-11-29 1918-11-30 
        58         56         42         61         48         47         47 
1918-12-01 1918-12-02 1918-12-03 1918-12-04 1918-12-05 1918-12-06 1918-12-07 
        40         36         47         31         39         23         29 
1918-12-08 1918-12-09 1918-12-10 1918-12-11 1918-12-12 1918-12-13 1918-12-14 
        27         28         20         30         21         24         28 
1918-12-15 1918-12-16 1918-12-17 1918-12-18 1918-12-19 1918-12-20 1918-12-21 
        16         13         15         21         16         17         16 
1918-12-22 1918-12-23 1918-12-24 1918-12-25 1918-12-26 1918-12-27 1918-12-28 
        13         32          5          9         14         25         17 
1918-12-29 1918-12-30 1918-12-31 1919-01-01 1919-01-02 1919-01-03 1919-01-04 
        15         14         12         13         23         13         21 
1919-01-05 1919-01-06 1919-01-07 1919-01-08 1919-01-09 1919-01-10 1919-01-11 
        12         11         12          7         11         15         12 
1919-01-12 1919-01-13 1919-01-14 1919-01-15 1919-01-16 1919-01-17 1919-01-18 
         3         22          8         10         10          6          7 
1919-01-19 1919-01-20 1919-01-21 1919-01-22 1919-01-23 1919-01-24 1919-01-25 
        15         15          1         20          2          2          2 
1919-01-26 1919-01-27 1919-01-28 1919-01-29 1919-01-30 1919-01-31 1919-02-01 
        17         16         15         11          3          1          3 
> 
> ## check.incid will extract names from the vector and coerce them as dates
> check.incid(Germany.1918)
$incid
  [1]  10   4   4  19   6  13  28  23  35  27  42  51  43  78  86  80 109 126
 [19] 126 159 190 209 161 199 227 246 269 243 259 264 243 289 247 289 263 230
 [37] 235 227 208 184 179 139 157 141 128 142 129  99 109  79  86  73  86  71
 [55]  80  71  58  56  42  61  48  47  47  40  36  47  31  39  23  29  27  28
 [73]  20  30  21  24  28  16  13  15  21  16  17  16  13  32   5   9  14  25
 [91]  17  15  14  12  13  23  13  21  12  11  12   7  11  15  12   3  22   8
[109]  10  10   6   7  15  15   1  20   2   2   2  17  16  15  11   3   1   3

$t
  [1] "1918-09-29" "1918-09-30" "1918-10-01" "1918-10-02" "1918-10-03"
  [6] "1918-10-04" "1918-10-05" "1918-10-06" "1918-10-07" "1918-10-08"
 [11] "1918-10-09" "1918-10-10" "1918-10-11" "1918-10-12" "1918-10-13"
 [16] "1918-10-14" "1918-10-15" "1918-10-16" "1918-10-17" "1918-10-18"
 [21] "1918-10-19" "1918-10-20" "1918-10-21" "1918-10-22" "1918-10-23"
 [26] "1918-10-24" "1918-10-25" "1918-10-26" "1918-10-27" "1918-10-28"
 [31] "1918-10-29" "1918-10-30" "1918-10-31" "1918-11-01" "1918-11-02"
 [36] "1918-11-03" "1918-11-04" "1918-11-05" "1918-11-06" "1918-11-07"
 [41] "1918-11-08" "1918-11-09" "1918-11-10" "1918-11-11" "1918-11-12"
 [46] "1918-11-13" "1918-11-14" "1918-11-15" "1918-11-16" "1918-11-17"
 [51] "1918-11-18" "1918-11-19" "1918-11-20" "1918-11-21" "1918-11-22"
 [56] "1918-11-23" "1918-11-24" "1918-11-25" "1918-11-26" "1918-11-27"
 [61] "1918-11-28" "1918-11-29" "1918-11-30" "1918-12-01" "1918-12-02"
 [66] "1918-12-03" "1918-12-04" "1918-12-05" "1918-12-06" "1918-12-07"
 [71] "1918-12-08" "1918-12-09" "1918-12-10" "1918-12-11" "1918-12-12"
 [76] "1918-12-13" "1918-12-14" "1918-12-15" "1918-12-16" "1918-12-17"
 [81] "1918-12-18" "1918-12-19" "1918-12-20" "1918-12-21" "1918-12-22"
 [86] "1918-12-23" "1918-12-24" "1918-12-25" "1918-12-26" "1918-12-27"
 [91] "1918-12-28" "1918-12-29" "1918-12-30" "1918-12-31" "1919-01-01"
 [96] "1919-01-02" "1919-01-03" "1919-01-04" "1919-01-05" "1919-01-06"
[101] "1919-01-07" "1919-01-08" "1919-01-09" "1919-01-10" "1919-01-11"
[106] "1919-01-12" "1919-01-13" "1919-01-14" "1919-01-15" "1919-01-16"
[111] "1919-01-17" "1919-01-18" "1919-01-19" "1919-01-20" "1919-01-21"
[116] "1919-01-22" "1919-01-23" "1919-01-24" "1919-01-25" "1919-01-26"
[121] "1919-01-27" "1919-01-28" "1919-01-29" "1919-01-30" "1919-01-31"
[126] "1919-02-01"

> 
> ## Had Germany.1918 not have names() set, output would have been with index dates
> ## To force such an output, we here impose t=1:126. 
> ## Erasing names(Germany.1918) would have produced the same
> ## If so, then the epid$t vector returned will be replacement values.
> check.incid(Germany.1918, t=1:126)
$incid
  [1]  10   4   4  19   6  13  28  23  35  27  42  51  43  78  86  80 109 126
 [19] 126 159 190 209 161 199 227 246 269 243 259 264 243 289 247 289 263 230
 [37] 235 227 208 184 179 139 157 141 128 142 129  99 109  79  86  73  86  71
 [55]  80  71  58  56  42  61  48  47  47  40  36  47  31  39  23  29  27  28
 [73]  20  30  21  24  28  16  13  15  21  16  17  16  13  32   5   9  14  25
 [91]  17  15  14  12  13  23  13  21  12  11  12   7  11  15  12   3  22   8
[109]  10  10   6   7  15  15   1  20   2   2   2  17  16  15  11   3   1   3

$t
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108
[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126

> 
> ## You can also choose not to provide a complete date vector, but to only
> ## indicated the first day of the observation, and the number of days between each
> ## observation. In this example we will assume a time step of 7 days.
> check.incid(Germany.1918, date.first.obs="1918-01-01", time.step=7)
$incid
  [1]  10   4   4  19   6  13  28  23  35  27  42  51  43  78  86  80 109 126
 [19] 126 159 190 209 161 199 227 246 269 243 259 264 243 289 247 289 263 230
 [37] 235 227 208 184 179 139 157 141 128 142 129  99 109  79  86  73  86  71
 [55]  80  71  58  56  42  61  48  47  47  40  36  47  31  39  23  29  27  28
 [73]  20  30  21  24  28  16  13  15  21  16  17  16  13  32   5   9  14  25
 [91]  17  15  14  12  13  23  13  21  12  11  12   7  11  15  12   3  22   8
[109]  10  10   6   7  15  15   1  20   2   2   2  17  16  15  11   3   1   3

$t
  [1] "1918-01-01" "1918-01-08" "1918-01-15" "1918-01-22" "1918-01-29"
  [6] "1918-02-05" "1918-02-12" "1918-02-19" "1918-02-26" "1918-03-05"
 [11] "1918-03-12" "1918-03-19" "1918-03-26" "1918-04-02" "1918-04-09"
 [16] "1918-04-16" "1918-04-23" "1918-04-30" "1918-05-07" "1918-05-14"
 [21] "1918-05-21" "1918-05-28" "1918-06-04" "1918-06-11" "1918-06-18"
 [26] "1918-06-25" "1918-07-02" "1918-07-09" "1918-07-16" "1918-07-23"
 [31] "1918-07-30" "1918-08-06" "1918-08-13" "1918-08-20" "1918-08-27"
 [36] "1918-09-03" "1918-09-10" "1918-09-17" "1918-09-24" "1918-10-01"
 [41] "1918-10-08" "1918-10-15" "1918-10-22" "1918-10-29" "1918-11-05"
 [46] "1918-11-12" "1918-11-19" "1918-11-26" "1918-12-03" "1918-12-10"
 [51] "1918-12-17" "1918-12-24" "1918-12-31" "1919-01-07" "1919-01-14"
 [56] "1919-01-21" "1919-01-28" "1919-02-04" "1919-02-11" "1919-02-18"
 [61] "1919-02-25" "1919-03-04" "1919-03-11" "1919-03-18" "1919-03-25"
 [66] "1919-04-01" "1919-04-08" "1919-04-15" "1919-04-22" "1919-04-29"
 [71] "1919-05-06" "1919-05-13" "1919-05-20" "1919-05-27" "1919-06-03"
 [76] "1919-06-10" "1919-06-17" "1919-06-24" "1919-07-01" "1919-07-08"
 [81] "1919-07-15" "1919-07-22" "1919-07-29" "1919-08-05" "1919-08-12"
 [86] "1919-08-19" "1919-08-26" "1919-09-02" "1919-09-09" "1919-09-16"
 [91] "1919-09-23" "1919-09-30" "1919-10-07" "1919-10-14" "1919-10-21"
 [96] "1919-10-28" "1919-11-04" "1919-11-11" "1919-11-18" "1919-11-25"
[101] "1919-12-02" "1919-12-09" "1919-12-16" "1919-12-23" "1919-12-30"
[106] "1920-01-06" "1920-01-13" "1920-01-20" "1920-01-27" "1920-02-03"
[111] "1920-02-10" "1920-02-17" "1920-02-24" "1920-03-02" "1920-03-09"
[116] "1920-03-16" "1920-03-23" "1920-03-30" "1920-04-06" "1920-04-13"
[121] "1920-04-20" "1920-04-27" "1920-05-04" "1920-05-11" "1920-05-18"
[126] "1920-05-25"

> 
> ## Finally, if no names() are available for the dataset and date.first.obs is not provided,
> ## setting time.step to any integer value will generate a t vector starting 
> ## from 1 and incrementing by the time.step parameter.
> 
> 
> cleanEx()
> nameEx("est.GT")
> ### * est.GT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est.GT
> ### Title: Find the best-fitting GT distribution for a series of serial
> ###   interval
> ### Aliases: est.GT
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> # Data taken from traced cases of H1N1 viruses.
> data(H1N1.serial.interval)
> est.GT(serial.interval=H1N1.serial.interval)
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Best fitting GT distribution is a gamma distribution with mean = 3.039437 and sd = 1.676551 .
Discretized Generation Time distribution
mean: 3.070303 , sd: 1.676531 
 [1] 0.0000000000 0.1621208802 0.2704857362 0.2358751176 0.1561845680
 [6] 0.0888997193 0.0459909903 0.0222778094 0.0102848887 0.0045773285
[11] 0.0019791984 0.0008360608 0.0003464431 0.0001412594

> 
> ## Best fitting GT distribution is a gamma distribution with mean = 3.039437 and sd = 1.676551 .
> ## Discretized Generation Time distribution
> ## mean: 3.070303 , sd: 1.676531 
> ## [1] 0.0000000000 0.1621208802 0.2704857362 0.2358751176 0.1561845680 0.0888997193 0.0459909903 
> ## 0.0222778094 0.0102848887 0.0045773285 0.0019791984 0.0008360608 0.0003464431 0.0001412594
> 
> 
> # The same result can be achieved with two vectors of dates of onset.
> # Here we use the same data, but trick the function into thinking onset dates are all "0".
> data(H1N1.serial.interval)
> est.GT(infector.onset.dates=rep(0,length(H1N1.serial.interval)), 
+        infectee.onset.dates=H1N1.serial.interval)
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Best fitting GT distribution is a gamma distribution with mean = 3.039437 and sd = 1.676551 .
Discretized Generation Time distribution
mean: 3.070303 , sd: 1.676531 
 [1] 0.0000000000 0.1621208802 0.2704857362 0.2358751176 0.1561845680
 [6] 0.0888997193 0.0459909903 0.0222778094 0.0102848887 0.0045773285
[11] 0.0019791984 0.0008360608 0.0003464431 0.0001412594

> 
> 
> cleanEx()
> nameEx("est.R0.AR")
> ### * est.R0.AR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est.R0.AR
> ### Title: Estimate R0 from attack rate of an epidemic
> ### Aliases: est.R0.AR
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Woodall reported an attack rate of 0.31 in a population of 1732 during
> ## the 1957 H2N2 influenza pandemic ('Age and Asian Influenza, 1957', BMJ, 1958)
> 
> est.R0.AR(pop.size=1732, AR=0.31)
Reproduction number estimate using  Attack Rate  method.
R :  1.19698[ 1.179606 , 1.215077 ]

> # Reproduction number estimate using Attack Rate method
> # R :  1.19698[ 1.179606 , 1.215077 ]
> 
> est.R0.AR(AR=0.31)
Reproduction number estimate using  Attack Rate  method.
R :  1.19698
> # Reproduction number estimate using  Attack Rate  method.
> # R :  1.19698
> 
> est.R0.AR(pop.size=1732, incid=31)
Warning in min(diff(t)) :
  no non-missing arguments to min; returning Inf
Reproduction number estimate using  Attack Rate  method.
R :  1.009057[ 1.005873 , 1.012269 ]

> # Reproduction number estimate using Attack Rate method
> # R :  1.009057[ 1.005873 , 1.012269 ]
> 
> est.R0.AR(pop.size=1732, incid=c(2,3,4,7,4,2,4,5))
Reproduction number estimate using  Attack Rate  method.
R :  1.009057[ 1.005873 , 1.012269 ]

> # Reproduction number estimate using Attack Rate method
> # R :  1.009057[ 1.005873 , 1.012269 ]
> 
> est.R0.AR(pop.size=1732, incid=c(2,3,0,7,4,2,0,5))
Reproduction number estimate using  Attack Rate  method.
R :  1.006699[ 1.003965 , 1.009453 ]

> # Reproduction number estimate using Attack Rate method
> # R :  1.006699[ 1.003965 , 1.009453 ]
> 
> 
> cleanEx()
> nameEx("est.R0.EG")
> ### * est.R0.EG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est.R0.EG
> ### Title: Estimate R from exponential growth rate
> ### Aliases: est.R0.EG
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Data is taken from the paper by Nishiura for key transmission parameters of an institutional
> ## outbreak during 1918 influenza pandemic in Germany)
> 
> data(Germany.1918)
> mGT<-generation.time("gamma", c(3, 1.5))
> 
> est.R0.EG(Germany.1918, mGT, begin=1, end=27)
Waiting for profiling to be done...
Reproduction number estimate using  Exponential Growth  method.
R :  1.525895[ 1.494984 , 1.557779 ]

> ## Reproduction number estimate using  Exponential Growth 
> ## R :  1.525895[ 1.494984 , 1.557779 ]
> 
> 
> cleanEx()
> nameEx("est.R0.ML")
> ### * est.R0.ML
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est.R0.ML
> ### Title: Estimate the reproduction number by maximum likelihood
> ### Aliases: est.R0.ML
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Data is taken from paper by Nishiura for key transmission parameters of an institutional
> ## outbreak during the 1918 influenza pandemic in Germany)
> 
> data(Germany.1918)
> mGT<-generation.time("gamma", c(2.45, 1.38))
> est.R0.ML(Germany.1918, mGT, begin=1, end=27, range=c(0.01,50))
Reproduction number estimate using  Maximum Likelihood  method.
R :  1.307222[ 1.236913 , 1.380156 ]

> # Reproduction number estimate using  Maximum Likelihood  method.
> # R :  1.307222[ 1.236913 , 1.380156 ]
> 
> res=est.R0.ML(Germany.1918, mGT, begin=1, end=27, range=c(0.01,50))
> plot(res)
Warning in plot.window(...) : "xscale" is not a graphical parameter
Warning in plot.window(...) : "TD.split" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "xscale" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "TD.split" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "xscale" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "TD.split" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "xscale" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "TD.split" is not a graphical parameter
Warning in box(...) : "xscale" is not a graphical parameter
Warning in box(...) : "TD.split" is not a graphical parameter
Warning in title(...) : "xscale" is not a graphical parameter
Warning in title(...) : "TD.split" is not a graphical parameter
> 
> ## no change in R with varying range 
> ## (dates here are the same index as before. Just to illustrate different use)
> est.R0.ML(Germany.1918, mGT, begin="1918-09-29", end="1918-10-25", range=c(0.01,100))
Reproduction number estimate using  Maximum Likelihood  method.
R :  1.307249[ 1.236913 , 1.380185 ]

> # Reproduction number estimate using  Maximum Likelihood  method.
> # R :  1.307249[ 1.236913 , 1.380185 ]
> 
> 
> 
> 
> cleanEx()
> nameEx("est.R0.SB")
> ### * est.R0.SB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est.R0.SB
> ### Title: Estimate the time dependent reproduction number using a Bayesian
> ###   approach
> ### Aliases: est.R0.SB
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Data is taken from the paper by Nishiura for key transmission parameters of an institutional
> ## outbreak during 1918 influenza pandemic in Germany)
> 
> data(Germany.1918)
> mGT <- generation.time("gamma", c(3,1.5))
> SB <- est.R0.SB(Germany.1918, mGT)
> 
> ## Results will include "most likely R(t)" (ie. the R(t) value for which the computed probability 
> ## is the highest), along with 95% CI, in a data.frame object
> SB
Reproduction number estimate using  Sequential Bayesian  method.
0 0 2.22 0.66 1.2 1.84 1.43 1.63 1.34 1.52 ...

> # Reproduction number estimate using  Real Time Bayesian  method.
> # 0 0 2.02 0.71 1.17 1.7 1.36 1.53 1.28 1.43 ...
> 
> SB$Rt.quant
NULL
> # Date R.t. CI.lower. CI.upper.
> # 1  1918-09-29 0.00      0.01      1.44
> # 2  1918-09-30 0.00      0.01      1.42
> # 3  1918-10-01 2.02      0.97      2.88
> # 4  1918-10-02 0.71      0.07      1.51
> # 5  1918-10-03 1.17      0.40      1.84
> # 6  1918-10-04 1.70      1.09      2.24
> # 7  1918-10-05 1.36      0.84      1.83
> # 8  1918-10-06 1.53      1.08      1.94
> # 9  1918-10-07 1.28      0.88      1.66
> # 10 1918-10-08 1.43      1.08      1.77
> # ...
> 
> ## "Plot" will provide the most-likely R value at each time unit, along with 95CI
> plot(SB)
Warning in plot.window(...) : "TD.split" is not a graphical parameter
Warning in plot.xy(xy, type, ...) :
  "TD.split" is not a graphical parameter
Warning in axis(side, at = z, labels = labels, ...) :
  "TD.split" is not a graphical parameter
Warning in axis(side = side, at = at, labels = labels, ...) :
  "TD.split" is not a graphical parameter
Warning in box(...) : "TD.split" is not a graphical parameter
Warning in title(...) : "TD.split" is not a graphical parameter
> ## "Plotfit" will show the complete distribution of R for 9 time unit throughout the outbreak
> plotfit(SB)
> 
> 
> cleanEx()
> nameEx("est.R0.TD")
> ### * est.R0.TD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: est.R0.TD
> ### Title: Estimate the time dependent reproduction number
> ### Aliases: est.R0.TD
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Data is taken from the paper by Nishiura for key transmission parameters of an institutional
> ## outbreak during 1918 influenza pandemic in Germany)
> 
> data(Germany.1918)
> mGT<-generation.time("gamma", c(3, 1.5))
> TD <- est.R0.TD(Germany.1918, mGT, begin=1, end=126, nsim=100)
Warning in est.R0.TD(Germany.1918, mGT, begin = 1, end = 126, nsim = 100) :
  Accurate confidence interval for R(t) requires a large number of simulations. Consider increasing 'nsim'
Warning in est.R0.TD(Germany.1918, mGT, begin = 1, end = 126, nsim = 100) :
  Using initial incidence as initial number of cases.
> # Warning messages:
> # 1: In est.R0.TD(Germany.1918, mGT) : Simulations may take several minutes.
> # 2: In est.R0.TD(Germany.1918, mGT) : Using initial incidence as initial number of cases.
> TD
Reproduction number estimate using  Time-Dependent  method.
2.322239 2.272013 1.998474 1.843703 2.019297 1.867488 1.644993 1.553265 1.553317 1.601317 ...

> # Reproduction number estimate using  Time-Dependent  method.
> # 2.322239 2.272013 1.998474 1.843703 2.019297 1.867488 1.644993 1.553265 1.553317 1.601317 ...
> 
> ## An interesting way to look at these results is to agregate initial data by longest time unit,
> ## such as weekly incidence. This gives a global overview of the epidemic.
> TD.weekly <- smooth.Rt(TD, 7)
> TD.weekly
Reproduction number estimate using  Time-Dependent  method.
1.878424 1.580976 1.356918 1.131633 0.9615463 0.8118902 0.8045254 0.8395747 0.8542518 0.8258094 ...

> # Reproduction number estimate using  Time-Dependant  method.
> # 1.878424 1.580976 1.356918 1.131633 0.9615463 0.8118902 0.8045254 0.8395747 0.8542518 0.8258094..
> plot(TD.weekly)
> 
> 
> cleanEx()
> nameEx("estimate.R")
> ### * estimate.R
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimate.R
> ### Title: Estimate R0 for one incidence dataset using several methods
> ### Aliases: estimate.R
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Outbreak during 1918 influenza pandemic in Germany)
> data(Germany.1918)
> mGT<-generation.time("gamma", c(3, 1.5))
> estR0<-estimate.R(Germany.1918, mGT, begin=1, end=27, methods=c("EG", "ML", "TD", "AR", "SB"), 
+                   pop.size=100000, nsim=100)
Waiting for profiling to be done...
Warning in est.R0.TD(epid = c(`1918-09-29` = 10, `1918-09-30` = 4, `1918-10-01` = 4,  :
  Accurate confidence interval for R(t) requires a large number of simulations. Consider increasing 'nsim'
Warning in est.R0.TD(epid = c(`1918-09-29` = 10, `1918-09-30` = 4, `1918-10-01` = 4,  :
  Using initial incidence as initial number of cases.
> 
> attributes(estR0)
$names
[1] "epid"      "GT"        "begin"     "end"       "estimates"

$class
[1] "R0.sR"

> ## $names
> ## [1] "epid"      "GT"        "begin"     "end"       "estimates"
> ## 
> ## $class
> ## [1] "R0.sR"
> 
> ## Estimates results are stored in the $estimates object
> estR0
Reproduction number estimate using  Exponential Growth  method.
R :  1.525895[ 1.494984 , 1.557779 ]

Reproduction number estimate using  Maximum Likelihood  method.
R :  1.383996[ 1.309545 , 1.461203 ]

Reproduction number estimate using  Attack Rate  method.
R :  1.047392[ 1.046394 , 1.048393 ]

Reproduction number estimate using  Time-Dependent  method.
2.322239 2.272013 1.998474 1.843703 2.019297 1.867488 1.644993 1.553265 1.553317 1.601317 ...

Reproduction number estimate using  Sequential Bayesian  method.
0 0 2.22 0.66 1.2 1.84 1.43 1.63 1.34 1.52 ...

> ## Reproduction number estimate using  Exponential Growth  method.
> ## R :  1.525895[ 1.494984 , 1.557779 ]
> ## 
> ## Reproduction number estimate using  Maximum Likelihood  method.
> ## R :  1.383996[ 1.309545 , 1.461203 ]
> ## 
> ## Reproduction number estimate using  Attack Rate  method.
> ## R :  1.047392[ 1.046394 , 1.048393 ]
> ## 
> ## Reproduction number estimate using  Time-Dependent  method.
> ## 2.322239 2.272013 1.998474 1.843703 2.019297 1.867488 1.644993 1.553265 1.553317 1.601317 ...
> ## 
> ## Reproduction number estimate using  Sequential Bayesian  method.
> ## 0 0 2.22 0.66 1.2 1.84 1.43 1.63 1.34 1.52 ...
> 
> 
> ## If no date vector nor date of first observation are provided, results are the same
> ## except time values in $t are replaced by index
> 
> 
> cleanEx()
> nameEx("generation.time")
> ### * generation.time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generation.time
> ### Title: Generation Time distribution
> ### Aliases: generation.time
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> # GT for children at house(from Cauchemez PNAS 2011)
> 
> GT.chld.hsld1<-generation.time("empirical", c(0,0.25,0.2,0.15,0.1,0.09,0.05,0.01))
> plot(GT.chld.hsld1, col="green")
> GT.chld.hsld1
Discretized Generation Time distribution
mean: 2.729412 , sd: 1.611636 
[1] 0.00000000 0.29411765 0.23529412 0.17647059 0.11764706 0.10588235 0.05882353
[8] 0.01176471

> # Discretized Generation Time distribution
> # mean: 2.729412 , sd: 1.611636 
> # [1] 0.00000000 0.29411765 0.23529412 0.17647059 0.11764706 0.10588235 0.05882353
> # [8] 0.01176471
> 
> GT.chld.hsld2<-generation.time("gamma", c(2.45, 1.38))
> GT.chld.hsld2
Discretized Generation Time distribution
mean: 2.504038 , sd: 1.37276 
 [1] 0.0000000000 0.2553188589 0.3247178420 0.2199060781 0.1144367560
 [6] 0.0515687896 0.0212246257 0.0082077973 0.0030329325 0.0010825594
[11] 0.0003760069 0.0001277537

> # Discretized Generation Time distribution
> # mean: 2.504038 , sd: 1.372760
> # [1] 0.0000000000 0.2553188589 0.3247178420 0.2199060781 0.1144367560
> # [6] 0.0515687896 0.0212246257 0.0082077973 0.0030329325 0.0010825594
> #[11] 0.0003760069 0.0001277537
> 
> 
> # GT for school & community
> GTs1<-generation.time("empirical", c(0,0.95,0.05))
> plot(GTs1, col='blue')
> 
> 
> plot(GT.chld.hsld1, ylim=c(0,0.5), col="red")
> par(new=TRUE)
> plot(GT.chld.hsld2, xlim=c(0,7), ylim=c(0,0.5), col="black")
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("sensitivity.analysis")
> ### * sensitivity.analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sensitivity.analysis
> ### Title: Sensitivity analysis of basic reproduction ratio to begin/end
> ###   dates
> ### Aliases: sensitivity.analysis
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## Data is taken from the paper by Nishiura for key transmission parameters of an institutional
> ## outbreak during 1918 influenza pandemic in Germany)
> data(Germany.1918)
> 
> ## For this exemple, we use the exact same call as for the internal sensitivity analysis function
> 
> ## sa.type = "GT"
> 
> ## Here we will test GT with means of 1 to 5, each time with SD constant (1)
> ## GT and SD can be either fixed value or vectors of values
> ## Actual value in simulations may differ, as they are adapted according to the distribution type
> tmp<-sensitivity.analysis(sa.type="GT", incid=Germany.1918, GT.type="gamma", GT.mean=seq(1,5,1), 
+                           GT.sd.range=1, begin=1, end=27, est.method="EG")
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
> 
> ## Results are stored in a matrix, each line dedicated to a (mean,sd) couple
> plot(x=tmp[,"GT.Mean"], xlab="mean GT (days)", y=tmp[,"R"], ylim=c(1.2, 2.1), ylab="R0 (95% CI)", 
+      type="p", pch=19, col="black", main="Sensitivity of R0 to mean GT")
> arrows(x0=as.numeric(tmp[,"GT.Mean"]), y0=as.numeric(tmp[,"CI.lower"]), 
+        y1=as.numeric(tmp[,"CI.upper"]), angle=90, code=3, col="black", length=0.05)
> ## One could tweak this example to change sorting of values (per mean, or per standard deviation)
> ## eg: 'x=tmp[,c('GT.Mean')]' could become 'x=tmp[,c('GT.SD')]'
> 
> 
> ## sa.type="time"
> 
> mGT<-generation.time("gamma", c(2.6,1))
> sen=sensitivity.analysis(sa.type="time", incid=Germany.1918, GT=mGT, begin=1:15, end=16:30, 
+                          est.method="EG")
Warning: If 'begin' and 'end' overlap, cases where begin >= end are skipped.
These cases often return Rsquared = 1 and are thus ignored.
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
> # ...
> # Warning message:
> # If 'begin' and 'end' overlap, cases where begin >= end are skipped.
> # These cases often return Rsquared = 1 and are thus ignored.
> ## A list with different estimates of reproduction ratio, exponential growth rate and 95%CI 
> ## wtih different pairs of begin and end dates in form of data frame is returned.
> ## If method is "EG", results will include growth rate and deviance R-squared measure
> ## Else, if "ML" method is used, growth rate and R-squared will be set as NA
> 
> ## Interesting results include the variation of R0 given specific begin/end dates.
> ## Such results can be plot as a colored matrix and display Rsquared=f(time period)
> plot(sen, what=c("criterion","heatmap"))
dev.new(): using pdf(file="Rplots1.pdf")
$max.Rsquared
    Time.period Begin.dates  End.dates         R Growth.rate  Rsquared
211           1  1918-10-13 1918-10-14 0.7966431 -0.07232066 1.0000000
212           2  1918-10-13 1918-10-15 1.4638654  0.12578511 0.5780246
213           3  1918-10-13 1918-10-16 1.5701682  0.14956841 0.8301796
198           4  1918-10-12 1918-10-16 1.4607124  0.12505680 0.8366304
215           5  1918-10-13 1918-10-18 1.4880327  0.13132209 0.9102327
216           6  1918-10-13 1918-10-19 1.5323805  0.14128057 0.9471691
217           7  1918-10-13 1918-10-20 1.5261663  0.13990050 0.9658279
202           8  1918-10-12 1918-10-20 1.4978208  0.13354223 0.9661954
187           9  1918-10-11 1918-10-20 1.5517552  0.14555209 0.9529012
172          10  1918-10-10 1918-10-20 1.5483504  0.14480483 0.9615177
157          11  1918-10-09 1918-10-20 1.5514000  0.14547419 0.9683531
142          12  1918-10-08 1918-10-20 1.5752136  0.15066175 0.9684254
127          13  1918-10-07 1918-10-20 1.5649826  0.14844150 0.9711261
112          14  1918-10-06 1918-10-20 1.5733082  0.15024920 0.9744284
97           15  1918-10-05 1918-10-20 1.5621823  0.14783160 0.9752564
82           16  1918-10-04 1918-10-20 1.5766385  0.15096994 0.9749691
67           17  1918-10-03 1918-10-20 1.5985892  0.15568739 0.9683783
52           18  1918-10-02 1918-10-20 1.5868765  0.15317733 0.9684990
37           19  1918-10-01 1918-10-20 1.6030326  0.15663542 0.9655641
22           20  1918-09-30 1918-10-20 1.6148899  0.15915397 0.9654262
7            21  1918-09-29 1918-10-20 1.6103334  0.15818806 0.9672862
8            22  1918-09-29 1918-10-21 1.5542958  0.14610872 0.9448535
57           23  1918-10-02 1918-10-25 1.4394676  0.12011333 0.9449942
10           24  1918-09-29 1918-10-23 1.4997967  0.13398885 0.9424691
11           25  1918-09-29 1918-10-24 1.4792914  0.12932852 0.9437630
12           26  1918-09-29 1918-10-25 1.4615201  0.12524349 0.9456652
13           27  1918-09-29 1918-10-26 1.4329356  0.11858051 0.9354416
14           28  1918-09-29 1918-10-27 1.4088026  0.11286372 0.9281762
15           29  1918-09-29 1918-10-28 1.3858604  0.10734878 0.9199849
     CI.lower CI.upper
211 0.2829317 1.993745
212 0.9419193 2.229713
213 1.2073751 2.029051
198 1.2066743 1.762760
215 1.3038296 1.696242
216 1.3863578 1.693025
217 1.4102434 1.651379
202 1.3991827 1.603384
187 1.4602558 1.649198
172 1.4661091 1.635517
157 1.4761521 1.630877
142 1.5042459 1.650019
127 1.4995570 1.633778
112 1.5114270 1.638288
97  1.5044350 1.622720
82  1.5209417 1.635001
67  1.5440707 1.655724
52  1.5352480 1.640930
37  1.5523158 1.656148
22  1.5650942 1.667056
7   1.5622559 1.660686
8   1.5125261 1.597855
57  1.4110750 1.468726
10  1.4665869 1.534212
11  1.4493938 1.510194
12  1.4344734 1.489413
13  1.4085967 1.457980
14  1.3867572 1.431443
15  1.3658166 1.406409

$best.R0.values
 [1] 0.7966431 1.4638654 1.5701682 1.4607124 1.4880327 1.5323805 1.5261663
 [8] 1.4978208 1.5517552 1.5483504 1.5514000 1.5752136 1.5649826 1.5733082
[15] 1.5621823 1.5766385 1.5985892 1.5868765 1.6030326 1.6148899 1.6103334
[22] 1.5542958 1.4394676 1.4997967 1.4792914 1.4615201 1.4329356 1.4088026
[29] 1.3858604

$best.fit
   Time.period Begin.dates  End.dates        R Growth.rate  Rsquared CI.lower
97          15  1918-10-05 1918-10-20 1.562182   0.1478316 0.9752564 1.504435
   CI.upper
97  1.62272

> ## Returns complete data.frame of best R0 value for each time period 
> ## (allows for quick visualization)
> ## The "best.fit" is the time period over which the estimate is the more robust
> 
> # $best.fit
> #    Time.period Begin.dates  End.dates       R Growth.rate  Rsquared CI.lower. CI.upper.
> # 92          15  1970-01-08 1970-01-23 1.64098   0.1478316 0.9752564  1.574953  1.710209
> 
> 
> cleanEx()
> nameEx("sim.epid")
> ### * sim.epid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim.epid
> ### Title: Epidemic outbreak simulation
> ### Aliases: sim.epid
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## In this example we simulate n=100 epidemic curves, with peak value at 150 incident cases, 
> ## and maximum epidemic length of 30 time units.
> ## Only the outbreak phase is computed. When the peak value is reached, the process is stopped 
> ## and another epidemic is generated.
> sim.epid(epid.nb=100, GT=generation.time("gamma",c(3,1.5)), R0=1.5, 
+          epid.length=30, family="poisson", peak.value=150)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    1    1    1    1    1    1    1    1     1     1     1     1
 [2,]    0    1    0    1    1    0    1    0    0     0     0     1     1
 [3,]    0    1    1    0    1    0    1    0    0     0     1     0     2
 [4,]    1    1    1    0    1    2    0    0    0     0     1     1     2
 [5,]    0    0    0    1    0    1    1    0    0     0     0     1     3
 [6,]    0    0    1    0    0    2    0    0    0     0     0     0     1
 [7,]    0    0    1    0    2    4    1    0    0     1     1     0     1
 [8,]    0    0    0    1    2    1    0    0    0     0     0     2     2
 [9,]    0    0    0    0    1    3    1    0    0     3     0     1     2
[10,]    0    0    0    1    2    5    1    0    0     1     1     0     5
[11,]    0    0    1    0    1    2    2    0    0     0     0     0     3
[12,]    0    0    0    1    3    5    3    0    0     3     1     0     5
[13,]    0    0    1    0    6    9    1    0    0     6     0     0     1
[14,]    0    0    2    0    1    5    1    0    0     1     0     0     7
[15,]    0    0    1    1    7    9    1    0    0     8     0     0     2
[16,]    0    0    2    0    5   10    4    0    0     4     1     0     6
[17,]    0    0    0    0    7   11    1    0    0     5     1     0     5
[18,]    0    0    0    0    7   17    3    0    0     7     1     0     2
[19,]    0    0    1    0    9   15    2    0    0    11     1     0     4
[20,]    0    0    0    0    6   18    3    0    0     6     1     0     6
[21,]    0    0    1    1   10   21    3    0    0    10     0     0     4
[22,]    0    0    0    0    6   24    3    0    0    13     4     0     5
[23,]    0    0    2    0    9   27    1    0    0     9     2     0     5
[24,]    0    0    1    0    5   34    7    0    0     9     3     0    13
[25,]    0    0    1    0   15   40    6    0    0    24     5     0     7
[26,]    0    0    2    0   11   45    2    0    0    17     3     0    18
[27,]    0    0    0    0   24   46    6    0    0    21     4     0    10
[28,]    0    0    0    0   13   54    8    0    0    31     7     0    19
[29,]    0    0    0    0   30   65    9    0    0    24     5     0    12
[30,]    0    0    3    0   26   74   11    0    0    38     3     0    11
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
 [1,]     1     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     0     1     0     0     0     1     1     2     0     0     0
 [3,]     1     3     0     0     0     1     0     0     1     0     2     2
 [4,]     1     0     0     0     0     0     0     1     2     1     1     1
 [5,]     1     5     0     1     0     0     1     0     4     1     3     1
 [6,]     0     0     0     0     0     0     0     0     2     0     2     4
 [7,]     1     2     0     0     0     1     1     0     4     1     3     3
 [8,]     2     4     0     0     0     0     0     0     3     2     6     6
 [9,]     2     0     1     0     0     0     1     1     5     1     2     6
[10,]     2     2     1     1     0     1     1     1     4     1     6     3
[11,]     0     3     0     0     0     0     2     0     2     0     5     7
[12,]     1     3     0     1     0     0     2     1     9     1     7     9
[13,]     2     3     1     0     0     0     2     3     6     1     3    13
[14,]     0     8     0     0     0     0     1     6     9     1     5    19
[15,]     3     5     0     1     0     0     3     6     6     0     8    16
[16,]     2    12     0     1     0     0     3     4     6     1     8    17
[17,]     2     9     0     0     0     0     6     6    11     0     8    24
[18,]     7    12     0     0     0     0     7     5     8     0     8    27
[19,]     2    17     0     0     0     0     6     9    10     0    20    31
[20,]     7    15     0     0     0     0    11     9    13     0    18    42
[21,]     4    17     0     0     0     0     7     8    18     0    26    45
[22,]     5    19     0     0     0     0    10     9    19     0    32    46
[23,]     6    21     0     0     0     0    14     9    23     0    34    60
[24,]     8    21     0     0     0     0    15    13    27     0    40    81
[25,]     9    17     0     0     0     0    15    13    36     0    45    74
[26,]    16    28     0     0     0     0    23    25    33     0    53    96
[27,]    14    24     0     0     0     0    19    22    39     0    63    96
[28,]    12    36     0     0     0     0    35    34    60     0    65   141
[29,]    13    40     0     0     0     0    32    37    50     0    85   174
[30,]    24    44     0     0     0     0    41    38    56     0    87     0
      [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
 [1,]     1     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     0     0     0     2     0     0     1     0     0     0     0
 [3,]     0     0     1     0     1     1     0     2     0     0     0     0
 [4,]     0     0     0     0     2     1     0     3     0     0     0     1
 [5,]     0     0     0     0     1     1     0     2     0     0     1     0
 [6,]     0     1     0     0     2     0     0     3     1     0     1     1
 [7,]     0     0     1     0     1     2     0     4     0     0     0     0
 [8,]     0     0     0     0     0     2     0     3     1     0     2     1
 [9,]     1     1     2     0     3     2     0     7     1     0     1     0
[10,]     0     0     2     0     2     2     0     4     1     0     2     1
[11,]     0     0     1     0     3     1     0     8     0     0     0     1
[12,]     0     0     3     0     0     3     0     8     1     0     0     0
[13,]     0     0     1     0     8     3     0     6     0     0     1     2
[14,]     0     0     2     0     6     4     0     6     1     0     0     0
[15,]     0     0     4     0    10     1     0     8     1     0     0     0
[16,]     0     0     2     0     7     7     0    14     1     0     0     0
[17,]     0     0     2     0    12     4     0     9     0     0     0     0
[18,]     0     0     2     0    11     3     0    12     2     0     0     2
[19,]     0     0     4     0    13     2     0     8     2     0     0     0
[20,]     0     0     3     0    16     4     0    14     0     0     0     1
[21,]     0     0     5     0    18     6     0    15     0     0     0     1
[22,]     0     0     3     0    24     3     0    17     3     0     0     0
[23,]     0     0     3     0    30     3     0    21     4     0     0     1
[24,]     0     0     7     0    33     7     0    19     0     0     0     1
[25,]     0     0     8     0    39     9     0    24     0     0     0     2
[26,]     0     0     7     0    54     9     0    29     1     0     0     4
[27,]     0     0     9     0    48    11     0    29     0     0     0     2
[28,]     0     0    11     0    68    19     0    33     2     0     0     3
[29,]     0     0     8     0    67     9     0    43     2     0     0     3
[30,]     0     0    16     0    83    14     0    34     1     0     0     6
      [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]
 [1,]     1     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     1     1     0     0     0     0     0     0     0     0     1
 [3,]     0     1     0     1     0     0     0     0     0     0     2     0
 [4,]     1     1     1     1     0     0     0     0     0     0     3     0
 [5,]     0     0     1     1     0     0     0     1     0     0     1     1
 [6,]     2     2     1     0     0     0     0     2     0     0     2     2
 [7,]     1     2     5     3     0     0     0     1     0     0     3     1
 [8,]     2     3     0     1     0     0     0     1     0     0     6     2
 [9,]     2     2     4     1     0     0     0     1     0     0     8     1
[10,]     2     3     2     1     0     0     0     1     0     0     5     3
[11,]     1     4     5     0     0     0     0     4     0     0    11     0
[12,]     5     6     2     1     0     0     0     3     0     0     7     2
[13,]     4     2     2     1     0     0     0     4     0     0    10     3
[14,]     2     4     1     1     0     0     0     3     0     0    10     2
[15,]     0     5     3     5     0     0     0    10     0     0     9     4
[16,]     3     5     2     3     0     0     0     7     0     0    13     1
[17,]     1     3     3     2     0     0     0     8     0     0    12     2
[18,]     4     7     3     3     0     0     0    16     0     0    14     0
[19,]     2     8     0     1     0     0     0    15     0     0    11     3
[20,]     2     4     6     9     0     0     0    15     0     0    17     2
[21,]     6     7     1     3     0     0     0    10     0     0    20     4
[22,]     2     7     5     9     0     0     0    25     0     0    29     0
[23,]     5     7     5    10     0     0     0    25     0     0    36     2
[24,]     3     9     7    13     0     0     0    20     0     0    36     3
[25,]     7     9     3     9     0     0     0    28     0     0    48     3
[26,]     2     9     8    16     0     0     0    30     0     0    57     4
[27,]    11     8     9    22     0     0     0    34     0     0    72     3
[28,]     9    16     7    19     0     0     0    39     0     0    72     5
[29,]     9    14    14    25     0     0     0    45     0     0    86     5
[30,]    10    19    15    32     0     0     0    57     0     0    93     3
      [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61]
 [1,]     1     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     0     0     1     0     1     0     0     0     2     0     0
 [3,]     0     0     0     2     1     1     0     0     0     0     0     1
 [4,]     1     1     1     2     0     1     1     1     0     0     0     1
 [5,]     0     0     1     3     2     2     0     2     0     0     0     0
 [6,]     1     1     0     1     0     4     1     0     0     0     0     0
 [7,]     1     1     0     0     1     4     2     1     0     0     0     1
 [8,]     0     0     0     1     1     5     1     1     0     1     0     0
 [9,]     1     1     1     2     1     6     3     2     0     0     0     0
[10,]     1     0     0     3     0     4     2     1     0     0     0     0
[11,]     0     1     2     0     2     7     2     1     0     0     0     2
[12,]     2     1     1     2     1     6     3     0     0     0     0     0
[13,]     2     1     2     1     2     4     1     1     0     0     0     1
[14,]     6     4     1     3     1     9     5     1     0     0     0     4
[15,]     2     1     1     2     1    10     4     0     0     0     0     2
[16,]     6     1     1     1     4     6     9     1     0     0     0     1
[17,]     4    10     5     4     1    13     8     0     0     0     0     1
[18,]     7     6     1     2     4    13    12     1     0     0     0     0
[19,]     3     8     3     1     7    18    11     0     0     0     0     4
[20,]     6     6     3     3     5    19    10     3     0     0     0     2
[21,]     7     6     4     4     9    18    13     0     0     0     0     4
[22,]    10    10     8     6     7    24    18     0     0     0     0     4
[23,]    12    11     5     7    13    23    16     3     0     0     0     7
[24,]    10     9    12     4     6    29    22     1     0     0     0     8
[25,]    17    16    14     5    14    31    21     2     0     0     0    12
[26,]     9    12    14     4    16    36    24     2     0     0     0     8
[27,]    21    21    11     6    19    37    34     1     0     0     0     7
[28,]    21    16    12     9    22    43    32     2     0     0     0    14
[29,]    29    27    19    11    22    45    39     2     0     0     0    12
[30,]    36    24    18    10    29    66    47     3     0     0     0    13
      [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73]
 [1,]     1     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     0     0     0     2     0     0     0     0     0     0     1
 [3,]     1     0     1     1     0     1     0     0     1     0     1     1
 [4,]     3     1     0     1     0     2     0     1     0     1     1     1
 [5,]     2     0     1     0     1     3     0     0     0     0     1     2
 [6,]     1     1     1     0     0     1     0     1     0     0     0     2
 [7,]     3     1     2     0     0     0     0     1     0     1     0     4
 [8,]     4     0     3     0     0     1     0     2     0     0     1     1
 [9,]     1     0     0     0     0     2     0     0     0     1     0     4
[10,]     6     2     2     0     0     1     0     3     0     1     1     4
[11,]     4     1     6     0     1     1     0     1     0     0     0     6
[12,]     9     0     2     0     0     0     0     0     0     2     1     5
[13,]    10     0     1     0     0     1     0     3     0     2     1    11
[14,]    13     1     6     0     0     1     0     1     0     1     1    10
[15,]     8     0     4     0     1     1     0     3     0     5     1    11
[16,]    13     1     7     0     0     1     0     3     0     0     1     9
[17,]    17     0     9     0     0     2     0     2     0     2     1    17
[18,]    17     0    13     0     2     1     0     3     0     3     0    16
[19,]    18     0     9     0     0     3     0     2     0     1     2    23
[20,]    25     0     9     0     2     4     0     3     0     1     0    22
[21,]    22     0    16     0     0     5     0     5     0     2     2    23
[22,]    38     0    14     0     0     5     0     7     0     2     1    27
[23,]    34     0    17     0     0     6     0     3     0     4     3    31
[24,]    38     0    25     0     1     3     0     4     0     1     1    42
[25,]    34     0    24     0     1     3     0     6     0     3     3    53
[26,]    47     0    41     0     2     8     0     9     0     2     1    42
[27,]    46     0    27     0     3     3     0    11     0     4     3    56
[28,]    56     0    47     0     3    16     0     6     0     3     2    57
[29,]    58     0    57     0     3     9     0    10     0     6     4    71
[30,]   102     0    53     0     0    13     0     6     0     7     8    78
      [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85]
 [1,]     1     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     1     0     0     1     0     0     0     0     0     0     0
 [3,]     0     2     0     2     2     0     0     0     1     2     0     1
 [4,]     0     3     1     1     2     0     1     0     0     1     1     0
 [5,]     0     2     1     4     1     0     0     0     0     1     1     0
 [6,]     0     4     1     1     5     0     0     0     2     5     1     2
 [7,]     0     6     4     4     4     0     1     0     1     1     0     0
 [8,]     0     3     5     1     2     0     3     0     1     4     2     1
 [9,]     0     7     5     1     6     0     0     0     2     9     2     2
[10,]     0     9     7     7     6     0     2     0     2     6     1     1
[11,]     0     6     5     3     7     0     4     0     0    15     3     2
[12,]     0    10    11     6     9     0     3     0     2    13     2     2
[13,]     0    11     9     4     9     0     6     0     3    20     4     2
[14,]     0    18    10     6    11     0     5     0     3     9     2     3
[15,]     0    15    14     5     9     0    10     0     4    26     4     2
[16,]     0    21    12     4    12     0    10     0     4    17     5     3
[17,]     0    20    14     9    16     0    13     0     5    22     7     2
[18,]     0    24    25     9    19     0    16     0     3    27    11     2
[19,]     0    23    23     6    28     0    17     0     4    25    10    10
[20,]     0    24    21    16    29     0    16     0     2    44    13     4
[21,]     0    36    43    12    22     0    23     0     5    50    24     9
[22,]     0    45    40    26    32     0    31     0     4    46    22    10
[23,]     0    31    42    10    24     0    25     0     6    56    19     9
[24,]     0    59    52    17    39     0    29     0     3    55    28    19
[25,]     0    64    70    16    36     0    38     0     8    70    34    11
[26,]     0    81    67    21    42     0    51     0     5    82    35    16
[27,]     0    82    71    23    53     0    52     0     5    96    45    15
[28,]     0    98    96    17    68     0    37     0     6   122    49    12
[29,]     0   118   110    32    66     0    63     0     7   114    60    21
[30,]     0   149   105    24    82     0    70     0    10   139    45    24
      [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97]
 [1,]     1     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     0     0     0     0     0     0     0     0     1     0     0
 [3,]     0     0     0     1     2     0     0     0     0     0     0     1
 [4,]     1     0     0     2     2     0     0     1     0     1     0     1
 [5,]     0     0     0     0     1     0     0     0     1     1     0     1
 [6,]     0     0     0     1     2     0     0     0     0     1     1     1
 [7,]     0     0     0     1     3     0     0     0     0     3     0     1
 [8,]     0     0     0     1     1     0     0     0     2     3     1     3
 [9,]     0     0     0     2     5     0     0     0     0     3     2     0
[10,]     0     0     0     0     4     0     0     0     1     5     2     0
[11,]     0     0     0     2     4     0     0     0     1     3     1     0
[12,]     0     0     0     0     1     0     0     0     0     6     6     0
[13,]     0     0     0     2     7     0     0     0     2    10     3     1
[14,]     0     0     0     0     4     0     0     0     1    13     3     0
[15,]     0     0     0     1     7     0     0     0     2    13     6     0
[16,]     0     0     0     0    12     0     0     0     0    15     5     1
[17,]     0     0     0     0    10     0     0     0     3    13     8     0
[18,]     0     0     0     0    12     0     0     0     4    21     9     0
[19,]     0     0     0     0    15     0     0     0     4    26     7     0
[20,]     0     0     0     0    10     0     0     0     7    32    13     0
[21,]     0     0     0     1    14     0     0     0     6    36     4     0
[22,]     0     0     0     0    22     0     0     0     6    42    11     0
[23,]     0     0     0     0    16     0     0     0     8    62    11     0
[24,]     0     0     0     0    31     0     0     0    10    56    15     0
[25,]     0     0     0     0    26     0     0     0     8    52    12     0
[26,]     0     0     0     0    34     0     0     0    10    83    27     0
[27,]     0     0     0     0    46     0     0     0     8    78    28     0
[28,]     0     0     0     0    47     0     0     0    13    88    28     0
[29,]     0     0     0     0    45     0     0     0    12   116    26     0
[30,]     0     0     0     0    63     0     0     0    15   136    45     0
      [,98] [,99] [,100]
 [1,]     1     1      1
 [2,]     0     0      0
 [3,]     0     1      0
 [4,]     0     1      1
 [5,]     1     1      0
 [6,]     0     1      0
 [7,]     0     2      0
 [8,]     1     2      0
 [9,]     0     1      0
[10,]     1     0      0
[11,]     0     3      0
[12,]     0     0      0
[13,]     0     0      0
[14,]     1     1      0
[15,]     0     0      0
[16,]     0     3      0
[17,]     0     2      0
[18,]     1     5      0
[19,]     2     5      0
[20,]     4     5      0
[21,]     0     7      0
[22,]     3     8      0
[23,]     2     6      0
[24,]     2    13      0
[25,]     5    19      0
[26,]     2    20      0
[27,]     2    12      0
[28,]     6    25      0
[29,]     3    20      0
[30,]     7    30      0
> 
> # Here, a 30*100 matrix is returned. Each column is a single epidemic.
> 
> 
> cleanEx()
> nameEx("smooth.Rt")
> ### * smooth.Rt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smooth.Rt
> ### Title: Smooth real-time reproduction number over larger time period
> ### Aliases: smooth.Rt
> 
> ### ** Examples
> #Loading package
> library(R0)
> 
> ## This script allows for generating a new estimation for RTB and TD methods.
> ## Estimations used as input are agregated by a time period provided by user.
> ## Results can be plotted exactly the same was as input estimations,
> ## except they won't show any goodness of fit curve.
> data(Germany.1918)
> mGT <- generation.time("gamma", c(3,1.5))
> TD <- estimate.R(Germany.1918, mGT, begin=1, end=126, methods="TD", nsim=100)
Warning in est.R0.TD(epid = c(`1918-09-29` = 10, `1918-09-30` = 4, `1918-10-01` = 4,  :
  Accurate confidence interval for R(t) requires a large number of simulations. Consider increasing 'nsim'
Warning in est.R0.TD(epid = c(`1918-09-29` = 10, `1918-09-30` = 4, `1918-10-01` = 4,  :
  Using initial incidence as initial number of cases.
> TD
Reproduction number estimate using  Time-Dependent  method.
2.322239 2.272013 1.998474 1.843703 2.019297 1.867488 1.644993 1.553265 1.553317 1.601317 ...

> # Reproduction number estimate using  Time-Dependant  method.
> # 2.322239 2.272013 1.998474 1.843703 2.019297 1.867488 1.644993 1.553265 1.553317 1.601317 ...
> TD$estimates$TD$Rt.quant
NULL
> #     Date      R.t. CI.lower.  CI.upper.
> # 1      1 2.3222391 1.2000000  2.4000000
> # 2      2 2.2720131 2.7500000  6.2500000
> # 3      3 1.9984738 2.7500000  6.5000000
> # 4      4 1.8437031 0.7368421  1.5789474
> # 5      5 2.0192967 3.1666667  6.1666667
> # 6      6 1.8674878 1.6923077  3.2307692
> # 7      7 1.6449928 0.8928571  1.6428571
> # 8      8 1.5532654 1.3043478  2.2608696
> # 9      9 1.5533172 1.0571429  1.7428571
> # 10    10 1.6013169 1.6666667  2.6666667
> # ...
> 
> TD.weekly <- smooth.Rt(TD$estimates$TD, 7)
> TD.weekly
Reproduction number estimate using  Time-Dependent  method.
1.878424 1.580976 1.356918 1.131633 0.9615463 0.8118902 0.8045254 0.8395747 0.8542518 0.8258094 ...

> # Reproduction number estimate using  Time-Dependant  method.
> # 1.878424 1.580976 1.356918 1.131633 0.9615463 0.8118902 0.8045254 0.8395747 0.8542518 0.8258094..
> 
> TD.weekly$Rt.quant
NULL
> #    Date      R.t. CI.lower. CI.upper.
> # 1     1 1.8784240 1.3571429 2.7380952
> # 2     8 1.5809756 1.3311037 2.0100334
> # 3    15 1.3569175 1.1700628 1.5308219
> # 4    22 1.1316335 0.9961229 1.2445302
> # 5    29 0.9615463 0.8365561 1.0453074
> # 6    36 0.8118902 0.7132668 0.9365193
> # 7    43 0.8045254 0.6596685 0.9325967
> # 8    50 0.8395747 0.6776557 1.0402930
> # 9    57 0.8542518 0.6490251 1.1086351
> # 10   64 0.8258094 0.5836735 1.1142857
> # 11   71 0.8543877 0.5224719 1.1460674
> # 12   78 0.9776385 0.6228070 1.4912281
> # 13   85 0.9517133 0.5304348 1.3652174
> # 14   92 0.9272833 0.5045045 1.3423423
> # 15   99 0.9635479 0.4875000 1.5125000
> # 16  106 0.9508951 0.5000000 1.6670455
> # 17  113 0.9827432 0.5281989 1.8122157
> # 18  120 0.5843895 0.1103040 0.9490928
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.516 0.114 4.674 0.002 0.003 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
